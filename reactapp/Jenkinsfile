pipeline {
  agent {
    docker {
      image 'node:18'
      args '-u root -v /var/run/docker.sock:/var/run/docker.sock'
    }
  }

  environment {
    APP_DIR = 'reactapp'
    HOME = '/home/node'
    NPM_CONFIG_CACHE = '/home/node/.npm'
    IMAGE_NAME = 'my-react-app'
    CONTAINER_NAME = 'my-react-app-container'
    PORT = '3000'
  }

  stages {
    stage('Setup Docker CLI') {
      steps {
        sh '''
          apt-get update || { echo "Failed to update apt"; exit 1; }
          apt-get install -y docker.io || { echo "Failed to install docker.io"; exit 1; }
          docker --version || { echo "Docker CLI not working"; exit 1; }
        '''
      }
    }

    stage('Checkout') {
      steps {
        git branch: 'main', url: 'https://github.com/jjoevv/blog_nextjs.git'
      }
    }

    stage('Install Dependencies') {
      steps {
        dir("${APP_DIR}") {
          sh '''
            echo "Cleaning npm cache..."
            npm cache clean --force
            echo "Installing packages..."
            npm ci --cache $NPM_CONFIG_CACHE
          '''
        }
      }
    }

    stage('Build Docker Image') {
      steps {
        sh '''
          echo "üê≥ Building Docker image..."
          docker build -t $IMAGE_NAME ./${APP_DIR}
        '''
      }
    }

    stage('Deploy Docker Container') {
      steps {
        sh '''
          echo "üöÄ Stopping old container (if exists)..."
          docker rm -f $CONTAINER_NAME || true
          echo "üöÄ Checking port $PORT..."
          docker ps -q --filter "publish=$PORT" && docker rm -f $(docker ps -q --filter "publish=$PORT") || true
          echo "üöÄ Starting new container..."
          docker run -d --name $CONTAINER_NAME -p $PORT:$PORT $IMAGE_NAME
        '''
      }
    }
  }

  post {
    success {
      echo "‚úÖ App is running"
    }
    failure {
      echo "‚ùå Build failed"
    }
  }
}