pipeline {
  agent {
    docker {
        image 'node:18'
        args '-u root -v /var/run/docker.sock:/var/run/docker.sock'

    }
  }

  environment {
    APP_DIR = 'reactapp'
    HOME = '/home/node'
    NPM_CONFIG_CACHE = '/home/node/.npm'
    IMAGE_NAME = 'my-react-app'
    CONTAINER_NAME = 'my-react-app-container'
    PORT = '3000'
  }
stage('Check Docker') {
  steps {
    sh 'docker --version && docker ps'
  }
}
// and dependencies before building a new Docker image and running it as a container.
  stages {
    stage('Checkout') {
      steps {
        git branch: 'main', url: 'https://github.com/jjoevv/blog_nextjs.git'
      }
    }

    stage('Install Dependencies') {
      steps {
        dir("${APP_DIR}") {
          sh '''
            echo " Cleaning old dependencies..."
            rm -rf node_modules package-lock.json
            npm cache clean --force

            echo " Installing packages..."
            npm install
          '''
        }
      }
    }
     stage('Build Docker Image') {
      steps {
        sh '''
          echo "üê≥ Building Docker image..."
          docker build -t $IMAGE_NAME ./${APP_DIR}
        '''
      }
    }

    stage('Deploy Docker Container') {
      steps {
        sh '''
          echo "üöÄ Stopping old container (if exists)..."
          docker rm -f $CONTAINER_NAME || true

          echo "üöÄ Starting new container..."
          docker run -d --name $CONTAINER_NAME -p $PORT:$PORT $IMAGE_NAME
        '''
      }
    }
  }

  post {
    success {
      echo "‚úÖ App is running"
    }
    failure {
      echo "‚ùå Build failed"
    }
  }
}
// This Jenkinsfile is designed to run a React application using a Node.js Docker image.
// It checks out the code from a Git repository, installs dependencies, and cleans up old files